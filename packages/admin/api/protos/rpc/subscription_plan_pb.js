// source: rpc/subscription_plan.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.subscription_plan.DeleteSubscriptionPlanResponse', null, global);
goog.exportSymbol('proto.subscription_plan.Pagination', null, global);
goog.exportSymbol('proto.subscription_plan.SubscriptionPlan', null, global);
goog.exportSymbol('proto.subscription_plan.SubscriptionPlanFilter', null, global);
goog.exportSymbol('proto.subscription_plan.SubscriptionPlanInput', null, global);
goog.exportSymbol('proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration', null, global);
goog.exportSymbol('proto.subscription_plan.SubscriptionPlanResponse', null, global);
goog.exportSymbol('proto.subscription_plan.UpdateSubscriptionPlanRequest', null, global);
goog.exportSymbol('proto.subscription_plan.UpdateSubscriptionPlanResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.SubscriptionPlanInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription_plan.SubscriptionPlanInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.SubscriptionPlanInput.displayName = 'proto.subscription_plan.SubscriptionPlanInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.SubscriptionPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription_plan.SubscriptionPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.SubscriptionPlan.displayName = 'proto.subscription_plan.SubscriptionPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.subscription_plan.DeleteSubscriptionPlanResponse.repeatedFields_, null);
};
goog.inherits(proto.subscription_plan.DeleteSubscriptionPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.DeleteSubscriptionPlanResponse.displayName = 'proto.subscription_plan.DeleteSubscriptionPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription_plan.UpdateSubscriptionPlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.UpdateSubscriptionPlanRequest.displayName = 'proto.subscription_plan.UpdateSubscriptionPlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.subscription_plan.UpdateSubscriptionPlanResponse.repeatedFields_, null);
};
goog.inherits(proto.subscription_plan.UpdateSubscriptionPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.UpdateSubscriptionPlanResponse.displayName = 'proto.subscription_plan.UpdateSubscriptionPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.SubscriptionPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.subscription_plan.SubscriptionPlanResponse.repeatedFields_, null);
};
goog.inherits(proto.subscription_plan.SubscriptionPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.SubscriptionPlanResponse.displayName = 'proto.subscription_plan.SubscriptionPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription_plan.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.Pagination.displayName = 'proto.subscription_plan.Pagination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription_plan.SubscriptionPlanFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription_plan.SubscriptionPlanFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription_plan.SubscriptionPlanFilter.displayName = 'proto.subscription_plan.SubscriptionPlanFilter';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.SubscriptionPlanInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.SubscriptionPlanInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlanInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    extraFee: jspb.Message.getFieldWithDefault(msg, 5, 0),
    invoicePeriod: jspb.Message.getFieldWithDefault(msg, 6, 0),
    invoiceDuration: jspb.Message.getFieldWithDefault(msg, 7, 0),
    trailPeriod: jspb.Message.getFieldWithDefault(msg, 8, 0),
    trailDuration: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.SubscriptionPlanInput}
 */
proto.subscription_plan.SubscriptionPlanInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.SubscriptionPlanInput;
  return proto.subscription_plan.SubscriptionPlanInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.SubscriptionPlanInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.SubscriptionPlanInput}
 */
proto.subscription_plan.SubscriptionPlanInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExtraFee(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoicePeriod(value);
      break;
    case 7:
      var value = /** @type {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration} */ (reader.readEnum());
      msg.setInvoiceDuration(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrailPeriod(value);
      break;
    case 9:
      var value = /** @type {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration} */ (reader.readEnum());
      msg.setTrailDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.SubscriptionPlanInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.SubscriptionPlanInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlanInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getExtraFee();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getInvoicePeriod();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getInvoiceDuration();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTrailPeriod();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTrailDuration();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration = {
  DAY: 0,
  WEEK: 1,
  MONTH: 2,
  YEAR: 3
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 price = 4;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 extra_fee = 5;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getExtraFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setExtraFee = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 invoice_period = 6;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getInvoicePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setInvoicePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional SubscriptionDuration invoice_duration = 7;
 * @return {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getInvoiceDuration = function() {
  return /** @type {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setInvoiceDuration = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional int32 trail_period = 8;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getTrailPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setTrailPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional SubscriptionDuration trail_duration = 9;
 * @return {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration}
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.getTrailDuration = function() {
  return /** @type {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.subscription_plan.SubscriptionPlanInput.SubscriptionDuration} value
 * @return {!proto.subscription_plan.SubscriptionPlanInput} returns this
 */
proto.subscription_plan.SubscriptionPlanInput.prototype.setTrailDuration = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.SubscriptionPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.SubscriptionPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.SubscriptionPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    price: jspb.Message.getFieldWithDefault(msg, 6, 0),
    extraFee: jspb.Message.getFieldWithDefault(msg, 7, 0),
    invoicePeriod: jspb.Message.getFieldWithDefault(msg, 8, 0),
    invoiceDuration: jspb.Message.getFieldWithDefault(msg, 9, ""),
    trailPeriod: jspb.Message.getFieldWithDefault(msg, 10, 0),
    trailDuration: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.SubscriptionPlan}
 */
proto.subscription_plan.SubscriptionPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.SubscriptionPlan;
  return proto.subscription_plan.SubscriptionPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.SubscriptionPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.SubscriptionPlan}
 */
proto.subscription_plan.SubscriptionPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExtraFee(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoicePeriod(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvoiceDuration(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrailPeriod(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrailDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.SubscriptionPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.SubscriptionPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.SubscriptionPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getExtraFee();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInvoicePeriod();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getInvoiceDuration();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTrailPeriod();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTrailDuration();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string slug = 4;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 price = 6;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 extra_fee = 7;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getExtraFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setExtraFee = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 invoice_period = 8;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getInvoicePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setInvoicePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string invoice_duration = 9;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getInvoiceDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setInvoiceDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 trail_period = 10;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getTrailPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setTrailPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string trail_duration = 11;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlan.prototype.getTrailDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlan} returns this
 */
proto.subscription_plan.SubscriptionPlan.prototype.setTrailDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.DeleteSubscriptionPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.DeleteSubscriptionPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    modified: jspb.Message.getFieldWithDefault(msg, 1, 0),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.subscription_plan.SubscriptionPlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.DeleteSubscriptionPlanResponse}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.DeleteSubscriptionPlanResponse;
  return proto.subscription_plan.DeleteSubscriptionPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.DeleteSubscriptionPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.DeleteSubscriptionPlanResponse}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModified(value);
      break;
    case 2:
      var value = new proto.subscription_plan.SubscriptionPlan;
      reader.readMessage(value,proto.subscription_plan.SubscriptionPlan.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.DeleteSubscriptionPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.DeleteSubscriptionPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModified();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.subscription_plan.SubscriptionPlan.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 modified = 1;
 * @return {number}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.DeleteSubscriptionPlanResponse} returns this
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.setModified = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SubscriptionPlan edges = 2;
 * @return {!Array<!proto.subscription_plan.SubscriptionPlan>}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.subscription_plan.SubscriptionPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.subscription_plan.SubscriptionPlan, 2));
};


/**
 * @param {!Array<!proto.subscription_plan.SubscriptionPlan>} value
 * @return {!proto.subscription_plan.DeleteSubscriptionPlanResponse} returns this
*/
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.subscription_plan.SubscriptionPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription_plan.SubscriptionPlan}
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.subscription_plan.SubscriptionPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.subscription_plan.DeleteSubscriptionPlanResponse} returns this
 */
proto.subscription_plan.DeleteSubscriptionPlanResponse.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.UpdateSubscriptionPlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.UpdateSubscriptionPlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.subscription_plan.SubscriptionPlanInput.toObject(includeInstance, f),
    where: (f = msg.getWhere()) && proto.subscription_plan.SubscriptionPlanFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanRequest}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.UpdateSubscriptionPlanRequest;
  return proto.subscription_plan.UpdateSubscriptionPlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.UpdateSubscriptionPlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanRequest}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.subscription_plan.SubscriptionPlanInput;
      reader.readMessage(value,proto.subscription_plan.SubscriptionPlanInput.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.subscription_plan.SubscriptionPlanFilter;
      reader.readMessage(value,proto.subscription_plan.SubscriptionPlanFilter.deserializeBinaryFromReader);
      msg.setWhere(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.UpdateSubscriptionPlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.UpdateSubscriptionPlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.subscription_plan.SubscriptionPlanInput.serializeBinaryToWriter
    );
  }
  f = message.getWhere();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.subscription_plan.SubscriptionPlanFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscriptionPlanInput payload = 1;
 * @return {?proto.subscription_plan.SubscriptionPlanInput}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.getPayload = function() {
  return /** @type{?proto.subscription_plan.SubscriptionPlanInput} */ (
    jspb.Message.getWrapperField(this, proto.subscription_plan.SubscriptionPlanInput, 1));
};


/**
 * @param {?proto.subscription_plan.SubscriptionPlanInput|undefined} value
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanRequest} returns this
*/
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanRequest} returns this
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubscriptionPlanFilter where = 2;
 * @return {?proto.subscription_plan.SubscriptionPlanFilter}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.getWhere = function() {
  return /** @type{?proto.subscription_plan.SubscriptionPlanFilter} */ (
    jspb.Message.getWrapperField(this, proto.subscription_plan.SubscriptionPlanFilter, 2));
};


/**
 * @param {?proto.subscription_plan.SubscriptionPlanFilter|undefined} value
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanRequest} returns this
*/
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.setWhere = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanRequest} returns this
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.clearWhere = function() {
  return this.setWhere(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription_plan.UpdateSubscriptionPlanRequest.prototype.hasWhere = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.UpdateSubscriptionPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.UpdateSubscriptionPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    modified: jspb.Message.getFieldWithDefault(msg, 1, 0),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.subscription_plan.SubscriptionPlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanResponse}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.UpdateSubscriptionPlanResponse;
  return proto.subscription_plan.UpdateSubscriptionPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.UpdateSubscriptionPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanResponse}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModified(value);
      break;
    case 2:
      var value = new proto.subscription_plan.SubscriptionPlan;
      reader.readMessage(value,proto.subscription_plan.SubscriptionPlan.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.UpdateSubscriptionPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.UpdateSubscriptionPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModified();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.subscription_plan.SubscriptionPlan.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 modified = 1;
 * @return {number}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanResponse} returns this
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.setModified = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SubscriptionPlan edges = 2;
 * @return {!Array<!proto.subscription_plan.SubscriptionPlan>}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.subscription_plan.SubscriptionPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.subscription_plan.SubscriptionPlan, 2));
};


/**
 * @param {!Array<!proto.subscription_plan.SubscriptionPlan>} value
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanResponse} returns this
*/
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.subscription_plan.SubscriptionPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription_plan.SubscriptionPlan}
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.subscription_plan.SubscriptionPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.subscription_plan.UpdateSubscriptionPlanResponse} returns this
 */
proto.subscription_plan.UpdateSubscriptionPlanResponse.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.subscription_plan.SubscriptionPlanResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.SubscriptionPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.SubscriptionPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageInfo: jspb.Message.getFieldWithDefault(msg, 1, 0),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.subscription_plan.SubscriptionPlan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.SubscriptionPlanResponse}
 */
proto.subscription_plan.SubscriptionPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.SubscriptionPlanResponse;
  return proto.subscription_plan.SubscriptionPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.SubscriptionPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.SubscriptionPlanResponse}
 */
proto.subscription_plan.SubscriptionPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageInfo(value);
      break;
    case 2:
      var value = new proto.subscription_plan.SubscriptionPlan;
      reader.readMessage(value,proto.subscription_plan.SubscriptionPlan.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.SubscriptionPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.SubscriptionPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageInfo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.subscription_plan.SubscriptionPlan.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 page_info = 1;
 * @return {number}
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.getPageInfo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.SubscriptionPlanResponse} returns this
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.setPageInfo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SubscriptionPlan edges = 2;
 * @return {!Array<!proto.subscription_plan.SubscriptionPlan>}
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.subscription_plan.SubscriptionPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.subscription_plan.SubscriptionPlan, 2));
};


/**
 * @param {!Array<!proto.subscription_plan.SubscriptionPlan>} value
 * @return {!proto.subscription_plan.SubscriptionPlanResponse} returns this
*/
proto.subscription_plan.SubscriptionPlanResponse.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.subscription_plan.SubscriptionPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription_plan.SubscriptionPlan}
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.subscription_plan.SubscriptionPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.subscription_plan.SubscriptionPlanResponse} returns this
 */
proto.subscription_plan.SubscriptionPlanResponse.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    skip: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.Pagination}
 */
proto.subscription_plan.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.Pagination;
  return proto.subscription_plan.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.Pagination}
 */
proto.subscription_plan.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSkip();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 total = 1;
 * @return {number}
 */
proto.subscription_plan.Pagination.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.Pagination} returns this
 */
proto.subscription_plan.Pagination.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool has_more = 2;
 * @return {boolean}
 */
proto.subscription_plan.Pagination.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.subscription_plan.Pagination} returns this
 */
proto.subscription_plan.Pagination.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.subscription_plan.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.Pagination} returns this
 */
proto.subscription_plan.Pagination.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 skip = 4;
 * @return {number}
 */
proto.subscription_plan.Pagination.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription_plan.Pagination} returns this
 */
proto.subscription_plan.Pagination.prototype.setSkip = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription_plan.SubscriptionPlanFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription_plan.SubscriptionPlanFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription_plan.SubscriptionPlanFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlanFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription_plan.SubscriptionPlanFilter}
 */
proto.subscription_plan.SubscriptionPlanFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription_plan.SubscriptionPlanFilter;
  return proto.subscription_plan.SubscriptionPlanFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription_plan.SubscriptionPlanFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription_plan.SubscriptionPlanFilter}
 */
proto.subscription_plan.SubscriptionPlanFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription_plan.SubscriptionPlanFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription_plan.SubscriptionPlanFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription_plan.SubscriptionPlanFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription_plan.SubscriptionPlanFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.subscription_plan.SubscriptionPlanFilter.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription_plan.SubscriptionPlanFilter} returns this
 */
proto.subscription_plan.SubscriptionPlanFilter.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.subscription_plan);
